//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace Cyotek.Data.Nbt.Tests
{
  partial class TagDoubleTests
  {
    [Test]
    public void Constructor_sets_name()
    {
      // arrange
      TagDouble target;
      string expected;
      string actual;

      expected = "Alphatag";

      // act
      target = new TagDouble(expected);

      // assert
      actual = target.Name;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_default_name()
    {
      // arrange
      TagDouble target;
      string expected;
      string actual;

      expected = string.Empty;

      // act
      target = new TagDouble();

      // assert
      actual = target.Name;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_default_value()
    {
      // arrange
      TagDouble target;
      double expected;
      double actual;

      expected = 0;

      // act
      target = new TagDouble();

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_value()
    {
      // arrange
      TagDouble target;
      double expected;
      double actual;

      expected = 8.98846567431158E+307;

      // act
      target = new TagDouble(string.Empty, expected);

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_value_without_name()
    {
      // arrange
      TagDouble target;
      double expected;
      double actual;

      expected = 8.98846567431158E+307;

      // act
      target = new TagDouble(expected);

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void SetValue_updates_value()
    {
      // arrange
      Tag target;
      double expected;
      double actual;

      target = new TagDouble();

      expected = 8.98846567431158E+307;

      // act
      target.SetValue(expected);

      // assert
      actual = ((TagDouble)target).Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetValue_retrieves_value()
    {
      // arrange
      Tag target;
      double expected;
      object actual;

      expected = 8.98846567431158E+307;

      target = TagFactory.CreateTag(expected);

      // act
      actual = target.GetValue();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Equals_returns_true_for_matching_tag()
    {
      // arrange
      TagDouble target;
      TagDouble other;
      bool actual;

      target = new TagDouble("alpha", 8.98846567431158E+307);
      other = new TagDouble("alpha", 8.98846567431158E+307);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsTrue(actual);
    }

    [Test]
    public void Equals_returns_false_with_different_name()
    {
      // arrange
      TagDouble target;
      TagDouble other;
      bool actual;

      target = new TagDouble("Alpha", 8.98846567431158E+307);
      other = new TagDouble("Beta", 8.98846567431158E+307);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsFalse(actual);
    }

    [Test]
    public void Equals_returns_false_with_different_value()
    {
      // arrange
      TagDouble target;
      TagDouble other;
      bool actual;

      target = new TagDouble(string.Empty, 8.98846567431158E+307);
      other = new TagDouble(string.Empty, 5.99231044954105E+307);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsFalse(actual);
    }

    [Test]
    public void Type_returns_correct_value()
    {
      // arrange
      TagDouble target;
      TagType expected;
      TagType actual;

      target = new TagDouble();

      expected = TagType.Double;

      // act
      actual = target.Type;

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetHashCode_returns_same_value_for_matching_tags()
    {
      // arrange
      TagDouble target;
      int actual;
      int expected;

      target = new TagDouble("beta", 8.98846567431158E+307);

      expected = new TagDouble("beta", 8.98846567431158E+307).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetHashCode_returns_different_values_with_different_name()
    {
      // arrange
      TagDouble target;
      int actual;
      int notExpected;

      target = new TagDouble("Alpha", 8.98846567431158E+307);

      notExpected = new TagDouble("Beta", 8.98846567431158E+307).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreNotEqual(notExpected, actual);
    }

    [Test]
    public void GetHashCode_returns_different_values_with_different_value()
    {
      // arrange
      TagDouble target;
      int actual;
      int notExpected;

      target = new TagDouble(string.Empty, 8.98846567431158E+307);

      notExpected = new TagDouble(string.Empty, 5.99231044954105E+307).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreNotEqual(notExpected, actual);
    }

    [Test]
    public void Value_can_be_set()
    {
      // arrange
      TagDouble target;
      double expected;
      double actual;

      expected = 8.98846567431158E+307;

      target = new TagDouble();

      // act
      target.Value = expected;

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void ToValueString_returns_string_version_of_value()
    {
      // arrange
      TagDouble target;
      string expected;
      string actual;

      expected = "8.98846567431158E+307";

      target = new TagDouble(string.Empty, 8.98846567431158E+307);

      // act
      actual = target.ToValueString();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void ToString_returns_string_version_of_tag()
    {
      // arrange
      TagDouble target;
      string expected;
      string actual;

      expected = "[Double: gamma=8.98846567431158E+307]";

      target = new TagDouble("gamma", 8.98846567431158E+307);

      // act
      actual = target.ToString();

      // assert
      Assert.AreEqual(expected, actual);
    }
  }
}

