<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="NbtGeneratorData.t4" #>
using System;

namespace Cyotek.Data.Nbt
{
  partial class TagFactory
  {
<# for(var i = 0; i < netTypeNames.Length; i++)
   {
     string name;
     string nbtName;
     string tagName;

     name = netTypeNames[i];
     nbtName = nbtTypeNames[i];
     tagName = nbtTagTypeNames[i];

     if(name != null)
     {
#>
    /// <summary>
    /// Creates a tag for a <see cref="<#=name#>" /> value.
    /// </summary>
    /// <param name="value">The <see cref="<#=name#>" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="<#=tagName#>" />.
    /// </returns>
    public static <#=tagName#> CreateTag(<#=name#> value)
    {
      return new <#=tagName#>(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="<#=name#>" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="<#=name#>" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="<#=tagName#>" />.
    /// </returns>
    public static <#=tagName#> CreateTag(string name, <#=name#> value)
    {
      return new <#=tagName#>(name, value);
    }

<#
    }
  }
#>

    /// <summary>
    /// Creates a tag for the specified value.
    /// </summary>
    /// <exception cref="ArgumentException">Thrown if <paramref name="tagType"/> is not valid.</exception>
    /// <param name="tagType">Type of the tag to create.</param>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The value of the tag.</param>
    /// <returns>
    /// A tag instance containing the specified value.
    /// </returns>
    public static ITag CreateTag(TagType tagType, string name, object value)
    {
      ITag result;

      switch (tagType)
      {
<# for(var i = 0; i < nbtTypeNames.Length; i++)
   {
     string tagName;
     string nbtName;

     nbtName = nbtTypeNames[i];
     tagName = nbtTagTypeNames[i];

     if(tagName != "TagEnd")
     {
#>
        case TagType.<#=nbtName#>:
          result = CreateTag(name, <#=objectConversions[i]#>);
          break;

<#
    }
  }
#>
        case TagType.End:
          result = new TagEnd();
          break;

        default:
          throw new ArgumentException("Unrecognized or unsupported tag type.", nameof(tagType));
      }

      return result;
    }

  }
}
