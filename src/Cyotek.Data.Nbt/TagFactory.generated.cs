//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;

namespace Cyotek.Data.Nbt
{
  partial class TagFactory
  {
    /// <summary>
    /// Creates a tag for a <see cref="byte" /> value.
    /// </summary>
    /// <param name="value">The <see cref="byte" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByte" />.
    /// </returns>
    public static TagByte CreateTag(byte value)
    {
      return new TagByte(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="byte" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="byte" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByte" />.
    /// </returns>
    public static TagByte CreateTag(string name, byte value)
    {
      return new TagByte(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="short" /> value.
    /// </summary>
    /// <param name="value">The <see cref="short" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagShort" />.
    /// </returns>
    public static TagShort CreateTag(short value)
    {
      return new TagShort(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="short" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="short" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagShort" />.
    /// </returns>
    public static TagShort CreateTag(string name, short value)
    {
      return new TagShort(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="int" /> value.
    /// </summary>
    /// <param name="value">The <see cref="int" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagInt" />.
    /// </returns>
    public static TagInt CreateTag(int value)
    {
      return new TagInt(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="int" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="int" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagInt" />.
    /// </returns>
    public static TagInt CreateTag(string name, int value)
    {
      return new TagInt(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="long" /> value.
    /// </summary>
    /// <param name="value">The <see cref="long" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagLong" />.
    /// </returns>
    public static TagLong CreateTag(long value)
    {
      return new TagLong(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="long" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="long" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagLong" />.
    /// </returns>
    public static TagLong CreateTag(string name, long value)
    {
      return new TagLong(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="float" /> value.
    /// </summary>
    /// <param name="value">The <see cref="float" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagFloat" />.
    /// </returns>
    public static TagFloat CreateTag(float value)
    {
      return new TagFloat(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="float" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="float" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagFloat" />.
    /// </returns>
    public static TagFloat CreateTag(string name, float value)
    {
      return new TagFloat(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="double" /> value.
    /// </summary>
    /// <param name="value">The <see cref="double" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagDouble" />.
    /// </returns>
    public static TagDouble CreateTag(double value)
    {
      return new TagDouble(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="double" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="double" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagDouble" />.
    /// </returns>
    public static TagDouble CreateTag(string name, double value)
    {
      return new TagDouble(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="byte[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="byte[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByteArray" />.
    /// </returns>
    public static TagByteArray CreateTag(byte[] value)
    {
      return new TagByteArray(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="byte[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="byte[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByteArray" />.
    /// </returns>
    public static TagByteArray CreateTag(string name, byte[] value)
    {
      return new TagByteArray(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="string" /> value.
    /// </summary>
    /// <param name="value">The <see cref="string" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagString" />.
    /// </returns>
    public static TagString CreateTag(string value)
    {
      return new TagString(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="string" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="string" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagString" />.
    /// </returns>
    public static TagString CreateTag(string name, string value)
    {
      return new TagString(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="TagCollection" /> value.
    /// </summary>
    /// <param name="value">The <see cref="TagCollection" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagList" />.
    /// </returns>
    public static TagList CreateTag(TagCollection value)
    {
      return new TagList(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="TagCollection" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="TagCollection" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagList" />.
    /// </returns>
    public static TagList CreateTag(string name, TagCollection value)
    {
      return new TagList(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="TagDictionary" /> value.
    /// </summary>
    /// <param name="value">The <see cref="TagDictionary" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagCompound" />.
    /// </returns>
    public static TagCompound CreateTag(TagDictionary value)
    {
      return new TagCompound(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="TagDictionary" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="TagDictionary" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagCompound" />.
    /// </returns>
    public static TagCompound CreateTag(string name, TagDictionary value)
    {
      return new TagCompound(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="int[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="int[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagIntArray" />.
    /// </returns>
    public static TagIntArray CreateTag(int[] value)
    {
      return new TagIntArray(value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="int[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="int[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagIntArray" />.
    /// </returns>
    public static TagIntArray CreateTag(string name, int[] value)
    {
      return new TagIntArray(name, value);
    }


    /// <summary>
    /// Creates a tag for the specified value.
    /// </summary>
    /// <exception cref="ArgumentException">Thrown if <paramref name="tagType"/> is not valid.</exception>
    /// <param name="tagType">Type of the tag to create.</param>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The value of the tag.</param>
    /// <returns>
    /// A tag instance containing the specified value.
    /// </returns>
    public static Tag CreateTag(TagType tagType, string name, object value)
    {
      Tag result;

      switch (tagType)
      {
        case TagType.Byte:
          result = CreateTag(name, Convert.ToByte(value));
          break;

        case TagType.Short:
          result = CreateTag(name, Convert.ToInt16(value));
          break;

        case TagType.Int:
          result = CreateTag(name, Convert.ToInt32(value));
          break;

        case TagType.Long:
          result = CreateTag(name, Convert.ToInt64(value));
          break;

        case TagType.Float:
          result = CreateTag(name, Convert.ToSingle(value));
          break;

        case TagType.Double:
          result = CreateTag(name, Convert.ToDouble(value));
          break;

        case TagType.ByteArray:
          result = CreateTag(name, (byte[])value);
          break;

        case TagType.String:
          result = CreateTag(name, Convert.ToString(value));
          break;

        case TagType.List:
          result = CreateTag(name, (TagCollection)value ?? new TagCollection());
          break;

        case TagType.Compound:
          result = CreateTag(name, (TagDictionary)value ?? new TagDictionary());
          break;

        case TagType.IntArray:
          result = CreateTag(name, (int[])value);
          break;

        case TagType.End:
          result = new TagEnd();
          break;

        default:
          throw new ArgumentException("Unrecognized or unsupported tag type.", nameof(tagType));
      }

      return result;
    }

  }
}
