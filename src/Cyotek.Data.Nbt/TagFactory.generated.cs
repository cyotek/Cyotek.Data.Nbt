//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Cyotek.Data.Nbt
{
  partial class TagFactory
  {
    /// <summary>
    /// Creates a tag for a <see cref="T:byte" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByte" />.
    /// </returns>
    public static TagByte CreateTag(byte value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:byte" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:byte" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByte" />.
    /// </returns>
    public static TagByte CreateTag(string name, byte value)
    {
      return new TagByte(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:short" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:short" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagShort" />.
    /// </returns>
    public static TagShort CreateTag(short value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:short" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:short" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagShort" />.
    /// </returns>
    public static TagShort CreateTag(string name, short value)
    {
      return new TagShort(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:int" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagInt" />.
    /// </returns>
    public static TagInt CreateTag(int value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:int" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:int" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagInt" />.
    /// </returns>
    public static TagInt CreateTag(string name, int value)
    {
      return new TagInt(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:long" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:long" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagLong" />.
    /// </returns>
    public static TagLong CreateTag(long value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:long" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:long" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagLong" />.
    /// </returns>
    public static TagLong CreateTag(string name, long value)
    {
      return new TagLong(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:float" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:float" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagFloat" />.
    /// </returns>
    public static TagFloat CreateTag(float value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:float" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:float" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagFloat" />.
    /// </returns>
    public static TagFloat CreateTag(string name, float value)
    {
      return new TagFloat(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:double" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:double" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagDouble" />.
    /// </returns>
    public static TagDouble CreateTag(double value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:double" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:double" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagDouble" />.
    /// </returns>
    public static TagDouble CreateTag(string name, double value)
    {
      return new TagDouble(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:byte[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByteArray" />.
    /// </returns>
    public static TagByteArray CreateTag(byte[] value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:byte[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:byte[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagByteArray" />.
    /// </returns>
    public static TagByteArray CreateTag(string name, byte[] value)
    {
      return new TagByteArray(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:string" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:string" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagString" />.
    /// </returns>
    public static TagString CreateTag(string value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:string" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:string" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagString" />.
    /// </returns>
    public static TagString CreateTag(string name, string value)
    {
      return new TagString(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:TagCollection" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagCollection" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagList" />.
    /// </returns>
    public static TagList CreateTag(TagCollection value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:TagCollection" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:TagCollection" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagList" />.
    /// </returns>
    public static TagList CreateTag(string name, TagCollection value)
    {
      return new TagList(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:TagDictionary" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagDictionary" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagCompound" />.
    /// </returns>
    public static TagCompound CreateTag(TagDictionary value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:TagDictionary" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:TagDictionary" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagCompound" />.
    /// </returns>
    public static TagCompound CreateTag(string name, TagDictionary value)
    {
      return new TagCompound(name, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:int[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagIntArray" />.
    /// </returns>
    public static TagIntArray CreateTag(int[] value)
    {
      return CreateTag(string.Empty, value);
    }

    /// <summary>
    /// Creates a tag for a <see cref="T:int[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The <see cref="T:int[]" /> value of the tag.</param>
    /// <returns>
    /// A new <see cref="TagIntArray" />.
    /// </returns>
    public static TagIntArray CreateTag(string name, int[] value)
    {
      return new TagIntArray(name, value);
    }

    /// <summary>
    /// Creates a tag for the specified parameters.
    /// </summary>
    /// <exception cref="ArgumentException">Thrown if <paramref name="tagType"/> is not valid.</exception>
    /// <param name="tagType">Type of the tag to create.</param>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="listType">The type of items a list holds.</param>
    /// <returns>
    /// A new tag using the specified parameters.
    /// </returns>
    public static Tag CreateTag(string name, TagType tagType, TagType listType)
    {
      Tag result;

      if (tagType != TagType.List)
      {
        if(listType != TagType.None)
        {
          throw new ArgumentException("Only lists can have a list type.", nameof(listType));
        }

        switch (tagType)
        {
          case TagType.Byte:
            result = new TagByte(name);
            break;

          case TagType.Short:
            result = new TagShort(name);
            break;

          case TagType.Int:
            result = new TagInt(name);
            break;

          case TagType.Long:
            result = new TagLong(name);
            break;

          case TagType.Float:
            result = new TagFloat(name);
            break;

          case TagType.Double:
            result = new TagDouble(name);
            break;

          case TagType.ByteArray:
            result = new TagByteArray(name);
            break;

          case TagType.String:
            result = new TagString(name);
            break;

          case TagType.Compound:
            result = new TagCompound(name);
            break;

          case TagType.IntArray:
            result = new TagIntArray(name);
            break;

            case TagType.End:
            result = new TagEnd();
            break;

          default:
            throw new ArgumentException("Unrecognized or unsupported tag type.", nameof(tagType));
        }
      }
      else
      {
        result = new TagList(name, listType);
      }

      return result;
    }

    /// <summary>
    /// Creates a tag for the specified value.
    /// </summary>
    /// <exception cref="ArgumentException">Thrown if <paramref name="tagType"/> is not valid.</exception>
    /// <param name="tagType">Type of the tag to create.</param>
    /// <param name="name">The name of the tag create.</param>
    /// <param name="value">The value of the tag.</param>
    /// <returns>
    /// A tag instance containing the specified value.
    /// </returns>
    public static Tag CreateTag(string name, TagType tagType, object value)
    {
      Tag result;

      switch (tagType)
      {
        case TagType.Byte:
          result = CreateTag(name, Convert.ToByte(value));
          break;

        case TagType.Short:
          result = CreateTag(name, Convert.ToInt16(value));
          break;

        case TagType.Int:
          result = CreateTag(name, Convert.ToInt32(value));
          break;

        case TagType.Long:
          result = CreateTag(name, Convert.ToInt64(value));
          break;

        case TagType.Float:
          result = CreateTag(name, Convert.ToSingle(value));
          break;

        case TagType.Double:
          result = CreateTag(name, Convert.ToDouble(value));
          break;

        case TagType.ByteArray:
          result = CreateTag(name, (byte[])value);
          break;

        case TagType.String:
          result = CreateTag(name, Convert.ToString(value));
          break;

        case TagType.List:
          result = CreateTag(name, (TagCollection)value ?? new TagCollection());
          break;

        case TagType.Compound:
          result = CreateTag(name, (TagDictionary)value ?? new TagDictionary());
          break;

        case TagType.IntArray:
          result = CreateTag(name, (int[])value);
          break;

        default:
          throw new ArgumentException("Unrecognized or unsupported tag type.", nameof(tagType));
      }

      return result;
    }

  }
}
