//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Cyotek.Data.Nbt.Serialization
{
  partial class TagWriter
  {
    /// <summary>
    /// Writes a <see cref="T:byte" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte" /> value to write.</param>
    protected abstract void WriteValue(byte value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:byte" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:byte" /> value to write.</param>
    public void WriteTag(string name, byte value)
    {
      this.WriteStartTag(TagType.Byte, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:byte" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte" /> value to write.</param>
    public void WriteTag(byte value)
    {
      this.WriteStartTag(TagType.Byte, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:short" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:short" /> value to write.</param>
    protected abstract void WriteValue(short value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:short" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:short" /> value to write.</param>
    public void WriteTag(string name, short value)
    {
      this.WriteStartTag(TagType.Short, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:short" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:short" /> value to write.</param>
    public void WriteTag(short value)
    {
      this.WriteStartTag(TagType.Short, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:int" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int" /> value to write.</param>
    protected abstract void WriteValue(int value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:int" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:int" /> value to write.</param>
    public void WriteTag(string name, int value)
    {
      this.WriteStartTag(TagType.Int, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:int" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int" /> value to write.</param>
    public void WriteTag(int value)
    {
      this.WriteStartTag(TagType.Int, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:long" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:long" /> value to write.</param>
    protected abstract void WriteValue(long value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:long" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:long" /> value to write.</param>
    public void WriteTag(string name, long value)
    {
      this.WriteStartTag(TagType.Long, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:long" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:long" /> value to write.</param>
    public void WriteTag(long value)
    {
      this.WriteStartTag(TagType.Long, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:float" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:float" /> value to write.</param>
    protected abstract void WriteValue(float value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:float" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:float" /> value to write.</param>
    public void WriteTag(string name, float value)
    {
      this.WriteStartTag(TagType.Float, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:float" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:float" /> value to write.</param>
    public void WriteTag(float value)
    {
      this.WriteStartTag(TagType.Float, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:double" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:double" /> value to write.</param>
    protected abstract void WriteValue(double value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:double" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:double" /> value to write.</param>
    public void WriteTag(string name, double value)
    {
      this.WriteStartTag(TagType.Double, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:double" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:double" /> value to write.</param>
    public void WriteTag(double value)
    {
      this.WriteStartTag(TagType.Double, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:byte[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte[]" /> value to write.</param>
    protected abstract void WriteValue(byte[] value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:byte[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:byte[]" /> value to write.</param>
    public void WriteTag(string name, byte[] value)
    {
      this.WriteStartTag(TagType.ByteArray, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:byte[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:byte[]" /> value to write.</param>
    public void WriteTag(byte[] value)
    {
      this.WriteStartTag(TagType.ByteArray, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:string" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:string" /> value to write.</param>
    protected abstract void WriteValue(string value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:string" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:string" /> value to write.</param>
    public void WriteTag(string name, string value)
    {
      this.WriteStartTag(TagType.String, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:string" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:string" /> value to write.</param>
    public void WriteTag(string value)
    {
      this.WriteStartTag(TagType.String, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:TagCollection" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagCollection" /> value to write.</param>
    protected abstract void WriteValue(TagCollection value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:TagCollection" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:TagCollection" /> value to write.</param>
    public void WriteTag(string name, TagCollection value)
    {
      this.WriteStartTag(TagType.List, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:TagCollection" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagCollection" /> value to write.</param>
    public void WriteTag(TagCollection value)
    {
      this.WriteStartTag(TagType.List, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:TagDictionary" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagDictionary" /> value to write.</param>
    protected abstract void WriteValue(TagDictionary value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:TagDictionary" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:TagDictionary" /> value to write.</param>
    public void WriteTag(string name, TagDictionary value)
    {
      this.WriteStartTag(TagType.Compound, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:TagDictionary" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:TagDictionary" /> value to write.</param>
    public void WriteTag(TagDictionary value)
    {
      this.WriteStartTag(TagType.Compound, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes a <see cref="T:int[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int[]" /> value to write.</param>
    protected abstract void WriteValue(int[] value);

    /// <summary>
    /// Writes a tag entry for a <see cref="T:int[]" /> value with the specified name.
    /// </summary>
    /// <param name="name">The name of the tag entry to write.</param>
    /// <param name="value">The <see cref="T:int[]" /> value to write.</param>
    public void WriteTag(string name, int[] value)
    {
      this.WriteStartTag(TagType.IntArray, name);
      this.WriteValue(value);
      this.WriteEndTag();
    }

    /// <summary>
    /// Writes an unnamed tag entry for a <see cref="T:int[]" /> value.
    /// </summary>
    /// <param name="value">The <see cref="T:int[]" /> value to write.</param>
    public void WriteTag(int[] value)
    {
      this.WriteStartTag(TagType.IntArray, string.Empty);
      this.WriteValue(value);
      this.WriteEndTag();
    }


    /// <summary>
    /// Writes a tag value.
    /// </summary>
    /// <exception cref="ArgumentException">Thrown when the type of the tag is invalid.</exception>
    /// <param name="tag">The <see cref="Tag"/> to write.</param>
    public void WriteValue(Tag tag)
    {
      switch (tag.Type)
      {
        case TagType.Byte:
          this.WriteValue(((TagByte)tag).Value);
          break;

        case TagType.Short:
          this.WriteValue(((TagShort)tag).Value);
          break;

        case TagType.Int:
          this.WriteValue(((TagInt)tag).Value);
          break;

        case TagType.Long:
          this.WriteValue(((TagLong)tag).Value);
          break;

        case TagType.Float:
          this.WriteValue(((TagFloat)tag).Value);
          break;

        case TagType.Double:
          this.WriteValue(((TagDouble)tag).Value);
          break;

        case TagType.ByteArray:
          this.WriteValue(((TagByteArray)tag).Value);
          break;

        case TagType.String:
          this.WriteValue(((TagString)tag).Value);
          break;

        case TagType.List:
          this.WriteValue(((TagList)tag).Value);
          break;

        case TagType.Compound:
          this.WriteValue(((TagCompound)tag).Value);
          break;

        case TagType.IntArray:
          this.WriteValue(((TagIntArray)tag).Value);
          break;


        default:
          throw new ArgumentException("Unrecognized or unsupported tag type.", nameof(tag));
      }
    }
  }
}
