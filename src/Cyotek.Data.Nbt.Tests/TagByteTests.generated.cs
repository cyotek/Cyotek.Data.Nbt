//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace Cyotek.Data.Nbt.Tests
{
  [TestFixture]
  public partial class TagByteTests : TestBase
  {
    [Test]
    public void Constructor_sets_name()
    {
      // arrange
      TagByte target;
      string expected;
      string actual;

      expected = "Alphatag";

      // act
      target = new TagByte(expected);

      // assert
      actual = target.Name;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_default_name()
    {
      // arrange
      TagByte target;
      string expected;
      string actual;

      expected = string.Empty;

      // act
      target = new TagByte();

      // assert
      actual = target.Name;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_default_value()
    {
      // arrange
      TagByte target;
      byte expected;
      byte actual;

      expected = 0;

      // act
      target = new TagByte();

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_value()
    {
      // arrange
      TagByte target;
      byte expected;
      byte actual;

      expected = 127;

      // act
      target = new TagByte(string.Empty, expected);

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Constructor_sets_value_without_name()
    {
      // arrange
      TagByte target;
      byte expected;
      byte actual;

      expected = 127;

      // act
      target = new TagByte(expected);

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void SetValue_updates_value()
    {
      // arrange
      Tag target;
      byte expected;
      byte actual;

      target = new TagByte();

      expected = 127;

      // act
      target.SetValue(expected);

      // assert
      actual = ((TagByte)target).Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetValue_retrieves_value()
    {
      // arrange
      Tag target;
      byte expected;
      object actual;

      expected = 127;

      target = TagFactory.CreateTag(expected);

      // act
      actual = target.GetValue();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Equals_returns_true_for_matching_tag()
    {
      // arrange
      TagByte target;
      TagByte other;
      bool actual;

      target = new TagByte("alpha", 127);
      other = new TagByte("alpha", 127);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsTrue(actual);
    }

    [Test]
    public void Equals_returns_false_with_different_name()
    {
      // arrange
      TagByte target;
      TagByte other;
      bool actual;

      target = new TagByte("Alpha", 127);
      other = new TagByte("Beta", 127);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsFalse(actual);
    }

    [Test]
    public void Equals_returns_false_with_different_value()
    {
      // arrange
      TagByte target;
      TagByte other;
      bool actual;

      target = new TagByte(string.Empty, 127);
      other = new TagByte(string.Empty, 63);

      // act
      actual = target.Equals(other);

      // assert
      Assert.IsFalse(actual);
    }

    [Test]
    public void Type_returns_correct_value()
    {
      // arrange
      TagByte target;
      TagType expected;
      TagType actual;

      target = new TagByte();

      expected = TagType.Byte;

      // act
      actual = target.Type;

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetHashCode_returns_same_value_for_matching_tags()
    {
      // arrange
      TagByte target;
      int actual;
      int expected;

      target = new TagByte("beta", 127);

      expected = new TagByte("beta", 127).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetHashCode_returns_different_values_with_different_name()
    {
      // arrange
      TagByte target;
      int actual;
      int notExpected;

      target = new TagByte("Alpha", 127);

      notExpected = new TagByte("Beta", 127).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreNotEqual(notExpected, actual);
    }

    [Test]
    public void GetHashCode_returns_different_values_with_different_value()
    {
      // arrange
      TagByte target;
      int actual;
      int notExpected;

      target = new TagByte(string.Empty, 127);

      notExpected = new TagByte(string.Empty, 63).GetHashCode();

      // act
      actual = target.GetHashCode();

      // assert
      Assert.AreNotEqual(notExpected, actual);
    }

    [Test]
    public void Value_can_be_set()
    {
      // arrange
      TagByte target;
      byte expected;
      byte actual;

      expected = 127;

      target = new TagByte();

      // act
      target.Value = expected;

      // assert
      actual = target.Value;
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void ToValueString_returns_string_version_of_value()
    {
      // arrange
      TagByte target;
      string expected;
      string actual;

      expected = "127";

      target = new TagByte(string.Empty, 127);

      // act
      actual = target.ToValueString();

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void ToString_returns_string_version_of_tag()
    {
      // arrange
      TagByte target;
      string expected;
      string actual;

      expected = "[Byte: gamma=127]";

      target = new TagByte("gamma", 127);

      // act
      actual = target.ToString();

      // assert
      Assert.AreEqual(expected, actual);
    }
  }
}

