<#@ include file="..\..\Cyotek.Data.Nbt\AutoGenerated.t4" #>
<#@ include file="..\..\Cyotek.Data.Nbt\NbtGeneratorData.t4" #>
<#@ include file="..\NbtGeneratorTestData.t4" #>using System.IO;
using NUnit.Framework;
using Cyotek.Data.Nbt.Serialization;

namespace Cyotek.Data.Nbt.Tests.Serialization
{
  [TestFixture]
  public partial class <#=writerTypeName #>Tests : TestBase
  {
    [Test]
    public void Document_serialization_deserialization_test()
    {
      this.WriteDocumentTest(this.CreateWriter, this.CreateReader);
    }

    [Test]
    public void Serialization_deserialization_test()
    {
      this.WriteTest(this.CreateWriter, this.CreateReader);
    }

<# for (int i = 0; i < netTypeNames.Length; i++)
    {
      string name;
      string nbtName;

      name = netTypeNames[i];
      nbtName = nbtTypeNames[i];

      if (name != null)
      {
        #>

    [Test]
    public void WriteTag_writes_unnamed_<#=nbtName.ToLower() #>_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        <#=name #> expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = <#=tagTestData[i]#>;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_<#=nbtName.ToLower()#>_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        <#=name#> expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "delta<#=name#>";
        expectedValue = <#=tagTestData[i]#>;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

<#
      }
    }
#>
  }
}
