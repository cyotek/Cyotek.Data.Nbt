//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using NUnit.Framework;
using Cyotek.Data.Nbt.Serialization;

namespace Cyotek.Data.Nbt.Tests.Serialization
{
  partial class BinaryTagWriterTests
  {
    [Test]
    public void Document_serialization_deserialization_test()
    {
      this.WriteDocumentTest(this.CreateWriter, this.CreateReader);
    }

    [Test]
    public void Serialization_deserialization_test()
    {
      this.WriteTest(this.CreateWriter, this.CreateReader);
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "No document is currently open.")]
    public void WriteEndDocument_throws_exception_if_document_is_not_open()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());

      // act
      target.WriteEndDocument();
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "No document is currently open.")]
    public void End_throws_exception_if_document_is_not_open()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());

      // act
      target.WriteEndTag();
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "No tag is currently open.")]
    public void End_throws_exception_if_tag_is_not_open()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());
      target.WriteStartDocument();

      // act
      target.WriteEndTag();
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "Expected 3 children, but 2 were written.")]
    public void End_throws_exception_if_child_count_does_not_match()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());
      target.WriteStartDocument();
      target.WriteStartTag(TagType.List, "alpha", TagType.Int, 3);
      target.WriteTag(1);
      target.WriteTag(2);

      // act
      target.WriteEndTag();
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "Attempted to add tag of type 'Byte' to container that only accepts 'List'.")]
    public void WriteStartTag_throws_exception_if_invalid_list_item_specified()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());

      target.WriteStartDocument();
      target.WriteStartTag(TagType.List, "alpha", TagType.List, 1);

      // act
      target.WriteStartTag(TagType.Byte);
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "No document is currently open.")]
    public void WriteStartTag_throws_exception_if_document_not_open()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());

      // act
      target.WriteStartTag(TagType.Compound);
    }

    [Test]
    [ExpectedException(typeof(InvalidOperationException), ExpectedMessage = "Document is already open.")]
    public void WriteDocumentStart_throws_exception_on_subsequent_call()
    {
      // arrange
      TagWriter target;

      target = this.CreateWriter(new MemoryStream());
      target.WriteStartDocument();

      // act
      target.WriteStartDocument();
    }


    [Test]
    public void WriteTag_writes_unnamed_byte_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        byte expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = (byte)(byte.MaxValue >> 1);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_byte_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        byte expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltabyte";
        expectedValue = (byte)(byte.MaxValue >> 1);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_byte()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        byte[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[] { 0, byte.MaxValue >> 1, byte.MaxValue };
        expectedName = "ListOfByte";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_byte()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        byte[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[] { 0, byte.MaxValue >> 1, byte.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_byte()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<byte> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[] { 0, byte.MaxValue >> 1, byte.MaxValue };
        expectedName = "ListOfByte";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_byte()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<byte> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[] { 0, byte.MaxValue >> 1, byte.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_byte_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagByte expected;
        TagByte actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonbyte", (byte)(byte.MaxValue >> 1));

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagByte)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_short_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        short expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = (short)(short.MaxValue >> 1);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_short_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        short expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltashort";
        expectedValue = (short)(short.MaxValue >> 1);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_short()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        short[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new short[] { 0, short.MaxValue >> 1, short.MaxValue };
        expectedName = "ListOfShort";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_short()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        short[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new short[] { 0, short.MaxValue >> 1, short.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_short()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<short> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new short[] { 0, short.MaxValue >> 1, short.MaxValue };
        expectedName = "ListOfShort";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_short()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<short> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new short[] { 0, short.MaxValue >> 1, short.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_short_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagShort expected;
        TagShort actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonshort", (short)(short.MaxValue >> 1));

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagShort)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_int_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        int expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = 1073741823;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_int_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        int expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltaint";
        expectedValue = 1073741823;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_int()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        int[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[] { 0, int.MaxValue >> 1, int.MaxValue };
        expectedName = "ListOfInt";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_int()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        int[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[] { 0, int.MaxValue >> 1, int.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_int()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<int> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[] { 0, int.MaxValue >> 1, int.MaxValue };
        expectedName = "ListOfInt";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_int()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<int> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[] { 0, int.MaxValue >> 1, int.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_int_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagInt expected;
        TagInt actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonint", 1073741823);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagInt)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_long_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        long expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = 4611686018427387903;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_long_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        long expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltalong";
        expectedValue = 4611686018427387903;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_long()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        long[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new long[] { 0, long.MaxValue >> 1, long.MaxValue };
        expectedName = "ListOfLong";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_long()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        long[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new long[] { 0, long.MaxValue >> 1, long.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_long()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<long> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new long[] { 0, long.MaxValue >> 1, long.MaxValue };
        expectedName = "ListOfLong";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_long()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<long> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new long[] { 0, long.MaxValue >> 1, long.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_long_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagLong expected;
        TagLong actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonlong", 4611686018427387903);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagLong)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_float_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        float expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = 1.701412E+38F;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_float_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        float expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltafloat";
        expectedValue = 1.701412E+38F;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_float()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        float[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new float[] { 0, float.MaxValue / 2, float.MaxValue };
        expectedName = "ListOfFloat";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_float()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        float[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new float[] { 0, float.MaxValue / 2, float.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_float()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<float> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new float[] { 0, float.MaxValue / 2, float.MaxValue };
        expectedName = "ListOfFloat";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_float()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<float> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new float[] { 0, float.MaxValue / 2, float.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_float_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagFloat expected;
        TagFloat actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonfloat", 1.701412E+38F);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagFloat)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_double_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        double expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = 8.98846567431158E+307;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_double_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        double expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltadouble";
        expectedValue = 8.98846567431158E+307;

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_double()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        double[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new double[] { 0, double.MaxValue / 2, double.MaxValue };
        expectedName = "ListOfDouble";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_double()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        double[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new double[] { 0, double.MaxValue / 2, double.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_double()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<double> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new double[] { 0, double.MaxValue / 2, double.MaxValue };
        expectedName = "ListOfDouble";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_double()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<double> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new double[] { 0, double.MaxValue / 2, double.MaxValue };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_double_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagDouble expected;
        TagDouble actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilondouble", 8.98846567431158E+307);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagDouble)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

        [Test]
    public void WriteTag_writes_empty_bytearray_array()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        byte[] expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new byte[0];

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }
        
    [Test]
    public void WriteTag_writes_unnamed_bytearray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        byte[] expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new byte[] { 2, 4, 8, 16, 32, 64, 128 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_bytearray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        byte[] expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltabyte[]";
        expectedValue = new byte[] { 2, 4, 8, 16, 32, 64, 128 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_bytearray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        byte[][] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[][] { new byte[] { 2, 4, 8}, new byte[] { 16, 32, 64, 128 } };
        expectedName = "ListOfByteArray";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_bytearray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        byte[][] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[][] { new byte[] { 2, 4, 8}, new byte[] { 16, 32, 64, 128 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_bytearray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<byte[]> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[][] { new byte[] { 2, 4, 8}, new byte[] { 16, 32, 64, 128 } };
        expectedName = "ListOfByteArray";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_bytearray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<byte[]> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new byte[][] { new byte[] { 2, 4, 8}, new byte[] { 16, 32, 64, 128 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_bytearray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagByteArray expected;
        TagByteArray actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonbyte[]", new byte[] { 2, 4, 8, 16, 32, 64, 128 });

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagByteArray)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_string_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        string expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!";

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_string_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        string expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltastring";
        expectedValue = "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!";

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_string()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        string[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new string[] { "alpha", "beta", "gamma"};
        expectedName = "ListOfString";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_string()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        string[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new string[] { "alpha", "beta", "gamma"};

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_string()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<string> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new string[] { "alpha", "beta", "gamma"};
        expectedName = "ListOfString";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_string()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<string> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new string[] { "alpha", "beta", "gamma"};

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_string_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagString expected;
        TagString actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonstring", "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!");

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagString)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_list_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagCollection expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new TagCollection(TagType.Int) { 2, 4, 8, 16, 32, 64, 128, 256 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_list_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagCollection expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltaTagCollection";
        expectedValue = new TagCollection(TagType.Int) { 2, 4, 8, 16, 32, 64, 128, 256 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_list()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        TagCollection[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagCollection[] { new TagCollection { 2, 4, 8, 16, 32 }, new TagCollection { 64, 128, 256 } };
        expectedName = "ListOfList";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_list()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        TagCollection[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagCollection[] { new TagCollection { 2, 4, 8, 16, 32 }, new TagCollection { 64, 128, 256 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_list()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<TagCollection> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagCollection[] { new TagCollection { 2, 4, 8, 16, 32 }, new TagCollection { 64, 128, 256 } };
        expectedName = "ListOfList";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_list()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<TagCollection> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagCollection[] { new TagCollection { 2, 4, 8, 16, 32 }, new TagCollection { 64, 128, 256 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_list_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagList expected;
        TagList actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonTagCollection", new TagCollection(TagType.Int) { 2, 4, 8, 16, 32, 64, 128, 256 });

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagList)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    public void WriteTag_writes_unnamed_compound_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagDictionary expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new TagDictionary { new TagByte("A", 2), new TagShort("B", 4), new TagInt("C", 8) };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_compound_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagDictionary expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltaTagDictionary";
        expectedValue = new TagDictionary { new TagByte("A", 2), new TagShort("B", 4), new TagInt("C", 8) };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_compound()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        TagDictionary[] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagDictionary[] { new TagDictionary { new TagByte("A", 2), new TagShort("B", 4) }, new TagDictionary { new TagInt("C", 8) } };
        expectedName = "ListOfCompound";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_compound()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        TagDictionary[] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagDictionary[] { new TagDictionary { new TagByte("A", 2), new TagShort("B", 4) }, new TagDictionary { new TagInt("C", 8) } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_compound()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<TagDictionary> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagDictionary[] { new TagDictionary { new TagByte("A", 2), new TagShort("B", 4) }, new TagDictionary { new TagInt("C", 8) } };
        expectedName = "ListOfCompound";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_compound()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<TagDictionary> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new TagDictionary[] { new TagDictionary { new TagByte("A", 2), new TagShort("B", 4) }, new TagDictionary { new TagInt("C", 8) } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_compound_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagCompound expected;
        TagCompound actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonTagDictionary", new TagDictionary { new TagByte("A", 2), new TagShort("B", 4), new TagInt("C", 8) });

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagCompound)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

        [Test]
    public void WriteTag_writes_empty_intarray_array()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        int[] expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new int[0];

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }
        
    [Test]
    public void WriteTag_writes_unnamed_intarray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        int[] expected;
        Tag actual;

        target = this.CreateWriter(stream);

        expected = new[] { 2190, 2994, 3248, 4294394 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expected, actual.GetValue());
      }
    }

    [Test]
    public void WriteTag_writes_named_intarray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        int[] expectedValue;
        string expectedName;
        Tag actual;

        target = this.CreateWriter(stream);

        expectedName = "deltaint[]";
        expectedValue = new[] { 2190, 2994, 3248, 4294394 };

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expectedName, expectedValue);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();
        stream.Position = 0;
        reader = this.CreateReader(stream);
        actual = ((TagCompound)reader.ReadTag())[0];
        Assert.AreEqual(expectedName, actual.Name);
        Assert.AreEqual(expectedValue, actual.GetValue());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_intarray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        int[][] expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[][] { new int[] { 2190, 2994 }, new int[] { 3248, 4294394 } };
        expectedName = "ListOfIntArray";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_intarray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        int[][] expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[][] { new int[] { 2190, 2994 }, new int[] { 3248, 4294394 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Length, actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_list_of_enumerable_intarray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<int[]> expected;
        string expectedName;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[][] { new int[] { 2190, 2994 }, new int[] { 3248, 4294394 } };
        expectedName = "ListOfIntArray";

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expectedName, expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[expectedName];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteListTag_writes_unnamed_list_of_enumerable_intarray()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        IEnumerable<int[]> expected;
        TagList actual;

        writer = this.CreateWriter(stream);

        expected = new int[][] { new int[] { 2190, 2994 }, new int[] { 3248, 4294394 } };

        writer.WriteStartDocument();
        writer.WriteStartTag(TagType.Compound);
        writer.WriteListTag(expected);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);

        // act
        actual = (TagList)reader.ReadDocument()[0];

        // assert
        Assert.AreEqual(expected.Count(), actual.Count);
        CollectionAssert.AreEqual(expected, actual.Value.Select(tag => tag.GetValue()).ToArray());
      }
    }

    [Test]
    public void WriteTag_writes_intarray_tag()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;
        TagReader reader;
        TagIntArray expected;
        TagIntArray actual;

        target = this.CreateWriter(stream);

        expected = TagFactory.CreateTag("epsilonint[]", new[] { 2190, 2994, 3248, 4294394 });

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(expected);

        // assert
        target.WriteEndTag();
        target.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        actual = (TagIntArray)((TagCompound)reader.ReadTag())[0];
        Assert.IsTrue(actual.Equals(expected));
      }
    }

    
    [Test]
    [ExpectedException(typeof(ArgumentException),ExpectedMessage = "Unrecognized or unsupported tag type.\r\nParameter name: tag")]
    public void WriteTag_throws_exception_for_invalid_tag_type()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagWriter target;

        target = this.CreateWriter(stream);

        target.WriteStartDocument();
        target.WriteStartTag(TagType.Compound);

        // act
        target.WriteTag(new BadTag("bad"));
      }
    }
  }
}

