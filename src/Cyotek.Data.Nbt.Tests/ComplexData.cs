using System;
using System.Collections.Generic;

namespace Cyotek.Data.Nbt.Tests
{
  public class ComplexData
  {
    #region Constants

    public static readonly byte[] SampleByteArray =
    {
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48,
      0,
      62,
      34,
      16,
      8,
      10,
      22,
      44,
      76,
      18,
      70,
      32,
      4,
      86,
      78,
      80,
      92,
      14,
      46,
      88,
      40,
      2,
      74,
      56,
      48,
      50,
      62,
      84,
      16,
      58,
      10,
      72,
      44,
      26,
      18,
      20,
      32,
      54,
      86,
      28,
      80,
      42,
      14,
      96,
      88,
      90,
      2,
      24,
      56,
      98,
      50,
      12,
      84,
      66,
      58,
      60,
      72,
      94,
      26,
      68,
      20,
      82,
      54,
      36,
      28,
      30,
      42,
      64,
      96,
      38,
      90,
      52,
      24,
      6,
      98,
      0,
      12,
      34,
      66,
      8,
      60,
      22,
      94,
      76,
      68,
      70,
      82,
      4,
      36,
      78,
      30,
      92,
      64,
      46,
      38,
      40,
      52,
      74,
      6,
      48
    };

    #endregion

    #region Constructors

    public ComplexData()
    {
      this.LongList = new List<long>();
      this.CompoundValue = new Dictionary<string, Compound1>();
      this.CompoundList = new List<Compound2>();
    }

    #endregion

    #region Static Properties

    public static ComplexData Default
    {
      get
      {
        return new ComplexData
               {
                 LongValue = 9223372036854775807,
                 ShortValue = 32767,
                 StringValue = "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!",
                 FloatValue = 0.498231471F,
                 IntegerValue = 2147483647,
                 CompoundValue =
                 {
                   {
                     "ham", new Compound1
                            {
                              Name = "Hampus",
                              Value = 0.75F
                            }
                   },
                   {
                     "egg", new Compound1
                            {
                              Name = "Eggbert",
                              Value = 0.5F
                            }
                   }
                 },
                 LongList =
                 {
                   11,
                   12,
                   13,
                   14,
                   15
                 },
                 CompoundList =
                 {
                   new Compound2
                   {
                     Name = "Compound tag #0",
                     CreatedOn = DateTime.FromBinary(1264099775885)
                   },
                   new Compound2
                   {
                     Name = "Compound tag #1",
                     CreatedOn = DateTime.FromBinary(1264099775885)
                   }
                 },
                 ByteArrayValue = SampleByteArray,
                 ByteValue = 127,
                 DoubleValue = 0.49312871321823148
               };
      }
    }

    #endregion

    #region Properties

    public byte[] ByteArrayValue { get; set; }

    public byte ByteValue { get; set; }

    public List<Compound2> CompoundList { get; set; }

    public Dictionary<string, Compound1> CompoundValue { get; set; }

    public double DoubleValue { get; set; }

    public float FloatValue { get; set; }

    public int IntegerValue { get; set; }

    public List<long> LongList { get; set; }

    public long LongValue { get; set; }

    public short ShortValue { get; set; }

    public string StringValue { get; set; }

    #endregion

    #region Nested type: Compound1

    public class Compound1
    {
      #region Properties

      public string Name { get; set; }

      public float Value { get; set; }

      #endregion
    }

    #endregion

    #region Nested type: Compound2

    public class Compound2
    {
      #region Properties

      public DateTime CreatedOn { get; set; }

      public string Name { get; set; }

      #endregion
    }

    #endregion
  }
}
