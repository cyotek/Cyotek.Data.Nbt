//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace Cyotek.Data.Nbt.Tests
{
  partial class TagCompoundTests
  {
    [Test]
    public void GetByteValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      byte expected;
      byte actual;
      string name;

      expected = (byte)(byte.MaxValue >> 1);
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetByteValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetByteValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      byte expected;
      byte actual;
      string name;

      expected = (byte)(byte.MaxValue >> 1);
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetByteValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetByte_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, (byte)(byte.MaxValue >> 1));

      // act
      actual = target.GetByte(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagByte>(actual);
    }

    [Test]
    public void GetByte_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetByte(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetShortValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      short expected;
      short actual;
      string name;

      expected = (short)(short.MaxValue >> 1);
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetShortValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetShortValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      short expected;
      short actual;
      string name;

      expected = (short)(short.MaxValue >> 1);
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetShortValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetShort_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, (short)(short.MaxValue >> 1));

      // act
      actual = target.GetShort(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagShort>(actual);
    }

    [Test]
    public void GetShort_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetShort(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetIntValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      int expected;
      int actual;
      string name;

      expected = 1073741823;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetIntValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetIntValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      int expected;
      int actual;
      string name;

      expected = 1073741823;
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetIntValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetInt_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, 1073741823);

      // act
      actual = target.GetInt(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagInt>(actual);
    }

    [Test]
    public void GetInt_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetInt(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetLongValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      long expected;
      long actual;
      string name;

      expected = 4611686018427387903;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetLongValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetLongValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      long expected;
      long actual;
      string name;

      expected = 4611686018427387903;
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetLongValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetLong_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, 4611686018427387903);

      // act
      actual = target.GetLong(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagLong>(actual);
    }

    [Test]
    public void GetLong_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetLong(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetFloatValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      float expected;
      float actual;
      string name;

      expected = 1.701412E+38F;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetFloatValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetFloatValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      float expected;
      float actual;
      string name;

      expected = 1.701412E+38F;
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetFloatValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetFloat_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, 1.701412E+38F);

      // act
      actual = target.GetFloat(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagFloat>(actual);
    }

    [Test]
    public void GetFloat_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetFloat(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetDoubleValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      double expected;
      double actual;
      string name;

      expected = 8.98846567431158E+307;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetDoubleValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetDoubleValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      double expected;
      double actual;
      string name;

      expected = 8.98846567431158E+307;
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetDoubleValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetDouble_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, 8.98846567431158E+307);

      // act
      actual = target.GetDouble(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagDouble>(actual);
    }

    [Test]
    public void GetDouble_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetDouble(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetByteArrayValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      byte[] expected;
      byte[] actual;
      string name;

      expected = new byte[] { 2, 4, 8, 16, 32, 64, 128 };
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetByteArrayValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetByteArrayValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      byte[] expected;
      byte[] actual;
      string name;

      expected = new byte[] { 2, 4, 8, 16, 32, 64, 128 };
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetByteArrayValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetByteArray_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, new byte[] { 2, 4, 8, 16, 32, 64, 128 });

      // act
      actual = target.GetByteArray(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagByteArray>(actual);
    }

    [Test]
    public void GetByteArray_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetByteArray(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetStringValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      string expected;
      string actual;
      string name;

      expected = "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!";
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetStringValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetStringValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      string expected;
      string actual;
      string name;

      expected = "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!";
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetStringValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetString_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, "HELLO WORLD THIS IS A TEST STRING ÅÄÖ!");

      // act
      actual = target.GetString(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagString>(actual);
    }

    [Test]
    public void GetString_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetString(name);

      // assert
      Assert.IsNull(actual);
    }

    [Test]
    public void GetList_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, new TagCollection(TagType.Int) { 2, 4, 8, 16, 32, 64, 128, 256 });

      // act
      actual = target.GetList(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagList>(actual);
    }

    [Test]
    public void GetList_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetList(name);

      // assert
      Assert.IsNull(actual);
    }

    [Test]
    public void GetCompound_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, new TagDictionary { new TagByte("A", 2), new TagShort("B", 4), new TagInt("C", 8) });

      // act
      actual = target.GetCompound(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagCompound>(actual);
    }

    [Test]
    public void GetCompound_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetCompound(name);

      // assert
      Assert.IsNull(actual);
    }

        [Test]
    public void GetIntArrayValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      int[] expected;
      int[] actual;
      string name;

      expected = new[] { 2190, 2994, 3248, 4294394 };
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetIntArrayValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetIntArrayValue_returns_default_value()
    {
      // arrange
      TagCompound target;
      int[] expected;
      int[] actual;
      string name;

      expected = new[] { 2190, 2994, 3248, 4294394 };
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetIntArrayValue(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void GetIntArray_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, new[] { 2190, 2994, 3248, 4294394 });

      // act
      actual = target.GetIntArray(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<TagIntArray>(actual);
    }

    [Test]
    public void GetIntArray_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.GetIntArray(name);

      // assert
      Assert.IsNull(actual);
    }

    
    [Test]
    public void GetGuidValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      Guid expected;
      Guid actual;
      string name;

      expected = new Guid("{52C1F966-496F-4802-841D-9E5579C86706}");
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetGuidValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

        [Test]
    public void GetDateTimeValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      DateTime expected;
      DateTime actual;
      string name;

      expected = new DateTime(2016, 12, 27, 21, 06, 00);
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetDateTimeValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

        [Test]
    public void GetBooleanValue_returns_existing_value()
    {
      // arrange
      TagCompound target;
      Boolean expected;
      Boolean actual;
      string name;

      expected = true;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.GetBooleanValue(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

      }
}
