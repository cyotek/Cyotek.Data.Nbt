<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="..\Cyotek.Data.Nbt\NbtGeneratorData.t4" #>
<#@ output extension=".cs" #>using System;
using NUnit.Framework;

namespace Cyotek.Data.Nbt.Tests
{
  partial class TagCompoundTests
  {
<# for (int i = 0; i < netTypeNames.Length; i++)
    {
      string name;
      string nbtName;
      string tagName;
      object testData;

      name = netTypeNames[i];
      nbtName = nbtTypeNames[i];
      tagName = "Tag" + nbtName;
      testData = tagTestData[i];

      if (name != null)
      {
        if (!this.IsListType(i) && !this.IsCompoundType(i))
        {
          #>
    [Test]
    public void Get<#=nbtName #>Value_returns_existing_value()
    {
      // arrange
      TagCompound target;
      <#=name #> expected;
      <#=name #> actual;
      string name;

      expected = <#=testData #>;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.Get<#=nbtName #>Value(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    [Test]
    public void Get<#=nbtName #>Value_returns_default_value()
    {
      // arrange
      TagCompound target;
      <#=name #> expected;
      <#=name #> actual;
      string name;

      expected = <#=testData #>;
      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.Get<#=nbtName #>Value(name, expected);

      // assert
      Assert.AreEqual(expected, actual);
    }

    <#
        }
    #>
[Test]
    public void Get<#=nbtName #>_returns_existing_tag()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, <#=testData #>);

      // act
      actual = target.Get<#=nbtName #>(name);

      // assert
      Assert.IsNotNull(actual);
      Assert.IsInstanceOf<<#=tagName #>>(actual);
    }

    [Test]
    public void Get<#=nbtName #>_returns_null_item()
    {
      // arrange
      TagCompound target;
      Tag actual;
      string name;

      name = "alpha";

      target = new TagCompound();

      // act
      actual = target.Get<#=nbtName #>(name);

      // assert
      Assert.IsNull(actual);
    }

    <#
      }
    }
#>

<# for (int i = 0; i < secondaryDataTypes.Length; i++)
    {
      string name;
      string nbtName;
      string mappedType;
      object testData;

      name = secondaryDataTypes[i];
      nbtName = secondaryDataTypeMappings[i];
      mappedType = secondaryDataTypeMappedTypes[i];
      testData = secondaryDataTypeTestData[i];
      #>
    [Test]
    public void Get<#=name #>Value_returns_existing_value()
    {
      // arrange
      TagCompound target;
      <#=name #> expected;
      <#=name #> actual;
      string name;

      expected = <#=testData #>;
      name = "alpha";

      target = new TagCompound();
      target.Value.Add(name, expected);

      // act
      actual = target.Get<#=name #>Value(name);

      // assert
      Assert.AreEqual(expected, actual);
    }

    <#
    }
#>
  }
}
